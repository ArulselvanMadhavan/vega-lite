{
  "$schema": "https://vega.github.io/schema/vega/v5.json",
  "width": 600,
  "height": 900,
  "data": [
    {"name": "pts_store"},
    {"name": "tree0", "url": "data/tree.json"},
    {
      "name": "tree",
      "url": "data/tree.json",
      "transform": [
        {"type": "stratify", "key": "id", "parentKey": "parent"},
        {
          "type": "tree",
          "method": {"signal": "layout"},
          "size": [{"signal": "height"}, {"signal": "width - 100"}],
          "separation": {"signal": "separation"},
          "as": ["y", "x", "depth", "children"]
        }
      ]
    },
    {
      "name": "links",
      "source": "tree",
      "transform": [
        {"type": "treelinks"},
        {
          "type": "linkpath",
          "orient": "horizontal",
          "shape": {"signal": "links"}
        }
      ]
    },
    {"name": "sample", "values": [{"values": [36]}]},
    {
      "name": "tree_with_ancestors",
      "source": ["tree"],
      "transform": [
        {"type": "stratify", "key": "id", "parentKey": "parent"},
        {
          "type": "formula",
          "expr": "treeAncestors('tree',datum.id)",
          "as": "my_tree_ancestor_list"
        }
      ]
    },
    {
      "name": "tree_anc_flat",
      "source": ["tree_with_ancestors"],
      "transform": [
        {"type": "flatten", "fields": ["my_tree_ancestor_list"]},
        {
          "type": "formula",
          "expr": "datum.my_tree_ancestor_list.id",
          "as": "ancId"
        }
      ]
    },
    {
      "name": "pts_store_ext",
      "source": ["pts_store"],
      "transform": [{"type": "flatten", "fields": ["values"]}]
    },
    {
      "name": "visible_nodes",
      "source": ["tree_anc_flat"],
      "transform": [
        {
          "type": "filter",
          "expr": "indata('pts_store_ext', 'values', datum.ancId)"
        }
      ]
    }
  ],
  "scales": [
    {
      "name": "color",
      "type": "linear",
      "range": {"scheme": "yelloworangebrown"},
      "domain": {"data": "tree", "field": "depth"},
      "zero": true
    }
  ],
  "marks": [
    {
      "type": "path",
      "from": {"data": "links"},
      "encode": {
        "update": {"path": {"field": "path"}, "stroke": {"value": "#ccc"}}
      }
    },
    {
      "type": "symbol",
      "name": "node",
      "from": {"data": "tree"},
      "interactive": true,
      "encode": {
        "enter": {
          "shape": {"value": "circle"},
          "size": {"value": 100},
          "stroke": {"value": "#fff"}
        },
        "update": {
          "x": {"field": "x"},
          "y": {"field": "y"},
          "fill": [
            {
              "test": "!length(data(\"pts_store\")) || vlSelectionTest(\"pts_store\", datum) || indata('visible_nodes', 'id', datum.id)",
              "scale": "color",
              "field": "depth"
            },
            {"value": "grey"}
          ]
        }
      }
    },
    {
      "type": "text",
      "from": {"data": "tree"},
      "encode": {
        "enter": {
          "text": {"field": "name"},
          "fontSize": {"value": 9},
          "baseline": {"value": "middle"}
        },
        "update": {
          "x": {"field": "x"},
          "y": {"field": "y"},
          "dx": {"signal": "datum.children ? -7 : 7"},
          "align": {"signal": "datum.children ? 'right' : 'left'"},
          "opacity": {"signal": "labels ? 1 : 0"}
        }
      }
    }
  ],
  "signals": [
    {"name": "layout", "value": "tidy"},
    {"name": "links", "value": "diagonal"},
    {"name": "separation", "value": true},
    {"name": "labels", "value": true},
    {
      "name": "unit",
      "value": {},
      "on": [
        {"events": "mousemove", "update": "isTuple(group()) ? group() : unit"}
      ]
    },
    {
      "name": "pts",
      "update": "vlSelectionResolve(\"pts_store\", \"union\", true, true)"
    },
    {
      "name": "pts_tuple",
      "on": [
        {
          "events": [{"source": "scope", "type": "click"}],
          "update": "datum && item().mark.marktype !== 'group' ? {unit: \"\", fields: pts_tuple_fields, values: [(item().isVoronoi ? datum.datum : datum)[\"id\"]]} : null",
          "force": true
        },
        {"events": [{"source": "view", "type": "dblclick"}], "update": "null"}
      ]
    },
    {"name": "pts_tuple_fields", "value": [{"type": "E", "field": "id"}]},
    {
      "name": "pts_toggle",
      "value": false,
      "on": [
        {
          "events": [{"source": "scope", "type": "click"}],
          "update": "event.shiftKey"
        },
        {"events": [{"source": "view", "type": "dblclick"}], "update": "false"}
      ]
    },
    {
      "name": "pts_modify",
      "on": [
        {
          "events": {"signal": "pts_tuple"},
          "update": "modify(\"pts_store\", pts_toggle ? null : pts_tuple, pts_toggle ? null : true, pts_toggle ? pts_tuple : null)"
        }
      ]
    }
  ]
}
